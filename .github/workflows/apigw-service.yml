name: API Gateway Service Tests

concurrency:
  group: deploy-server
  cancel-in-progress: false

on:
  push:
    branches: [ main ]
    paths:
      - 'services/apigw-service/**'
      - 'modules/common/**'
      - 'dependencies.gradle'
      - 'build.gradle'
  pull_request:
    branches: [ main ]
    paths:
      - 'services/apigw-service/**'
      - 'modules/common/**'

jobs:
  deploy-apigw:
    name: Deploy API Gateway Service
    runs-on: ubuntu-latest
    
    steps:
      - name: Download code
        uses: actions/checkout@v4

      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Test API Gateway Service
        run: ./gradlew :apigw:test

      - name: Build API Gateway Service
        run: ./gradlew :apigw:build -x test

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get Latest Version from Docker Hub
        id: version
        shell: bash
        run: |
          set -e
          echo "üîç Checking Docker Hub for existing tags..."
          
          # Try to fetch tags, but handle errors gracefully
          RESPONSE=$(curl -s -w "%{http_code}" "https://registry.hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/apigw-service/tags/?page_size=100" || echo "000")
          HTTP_CODE="${RESPONSE: -3}"
          RESPONSE_BODY="${RESPONSE%???}"
          
          if [[ "$HTTP_CODE" == "200" ]] && [[ -n "$RESPONSE_BODY" ]]; then
            echo "‚úÖ Successfully fetched tags from Docker Hub"
            # Fetch all tags, keep only x.y.z, pick highest semver
            LATEST_TAG=$(echo "$RESPONSE_BODY" | jq -r '.results[].name' 2>/dev/null | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -1 || echo "")
            
            if [[ -n "$LATEST_TAG" ]]; then
              echo "üìã Found latest tag: $LATEST_TAG"
              IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_TAG"
              PATCH=$((PATCH+1))
              NEW_VERSION="$MAJOR.$MINOR.$PATCH"
            else
              echo "üìã No semantic version tags found, starting with 1.0.0"
              NEW_VERSION="1.0.0"
            fi
          else
            echo "‚ö†Ô∏è  Could not fetch tags from Docker Hub (HTTP: $HTTP_CODE), starting with 1.0.0"
            echo "üìã This might be the first deployment or a temporary issue"
            NEW_VERSION="1.0.0"
          fi
          
          echo "latest_semver=${LATEST_TAG:-none}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "üöÄ New version will be: $NEW_VERSION"

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/apigw-service:${{ steps.version.outputs.new_version }} \
            -f services/apigw-service/Dockerfile .
          
          docker tag ${{ secrets.DOCKER_USERNAME }}/apigw-service:${{ steps.version.outputs.new_version }} \
            ${{ secrets.DOCKER_USERNAME }}/apigw-service:latest
          
          docker push ${{ secrets.DOCKER_USERNAME }}/apigw-service:${{ steps.version.outputs.new_version }}
          docker push ${{ secrets.DOCKER_USERNAME }}/apigw-service:latest

      - name: Show Pushed Images
        run: |
          echo "Successfully pushed:"
          echo "üê≥ ${{ secrets.DOCKER_USERNAME }}/apigw-service:${{ steps.version.outputs.new_version }}"
          echo "üê≥ ${{ secrets.DOCKER_USERNAME }}/apigw-service:latest" 

      - name: Upload docker-compose.yml to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          source: "docker-compose.yml"
          target: "/app"

      - name: SSH Deploy to Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            echo "üöÄ Deploying apigw-service version: ${{ steps.version.outputs.new_version }}"
            mkdir -p /app
            cd /app
            sed -i "s|image: ${{ secrets.DOCKER_USERNAME }}/apigw-service:.*|image: ${{ secrets.DOCKER_USERNAME }}/apigw-service:${{ steps.version.outputs.new_version }}|" docker-compose.yml
            
            # Try to pull the image, but don't fail if it doesn't exist yet
            echo "üîÑ Pulling apigw-service image..."
            if docker compose -p streamix pull apigw-service; then
              echo "‚úÖ Image pulled successfully"
            else
              echo "‚ö†Ô∏è  Image not found in registry, will build locally if needed"
            fi
            
            docker compose -p streamix up -d --no-deps apigw-service